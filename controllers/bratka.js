// Generated by CoffeeScript 1.9.3
(function() {
  var Friends, Stat, User, crypto, fileModel, fs, multiparty, pather;

  multiparty = require('multiparty');

  fs = require('fs');

  crypto = require('crypto');

  pather = require('path');

  fileModel = require('../models/files');

  User = require('../models/users');

  Friends = require('../models/friends');

  Stat = require('../models/stat');


  /*
    * File's methods for exports. Every methods call into routes module.
   */


  /*
  * home - Rendering user home page, check path correction
  
  * @param {Object} request
  * @param {Object} response
  * @api public
   */

  exports.home = function(request, response) {
    var path;
    if (!request.session.login) {
      return response.redirect('/');
    }
    path = request.params[0] ? request.params[0] : '';
    return getUserFileList(request.session.login, path, function(error, files) {
      if (error) {
        return response.redirect('/');
      }
      return User.find({
        login: request.session.login
      }, function(error, users) {
        if (error) {
          return response.redirect('/');
        }
        return Friends.find({
          owner: request.session.login
        }, function(error, friends) {
          if (error) {
            return response.redirect('/');
          }
          return response.render('home', {
            files: files,
            error: error,
            login: request.session.login,
            avatar: users[0].avatar,
            friends: friends.length ? friends[0].friends : [],
            firstname: users[0].firstname,
            lastname: users[0].lastname,
            storage: Math.ceil(10000 - users[0].storage)
          });
        });
      });
    });
  };


  /*
  * uploadFile - Uploading file using moudle multiparty, checking correction of path,
  * 			   checking of user's free space, setting right file extension, if file
  * 			   has unknown extension, update user's statistic, checking existence of
  * 			   uploaded file and removing if it exists.
  
  * @param {Object} request
  * @param {Object} response
  * @api public
   */

  exports.uploadfile = function(request, response) {
    var form, sha1;
    if (!request.session.login) {
      return response.redirect('/');
    }
    form = new (multiparty.Form());
    sha1 = crypro.createHash('sha1');
    form.parse(request);
    form.on('field', function(name, value) {
      if (name === 'hash') {
        value = sha1.update(file.filename).digest('hex');
      } else if (name === 'path') {
        value = getPath(value);
      } else if (name === 'size') {
        getFreeStorage(request.session.login, function(storage) {
          var is_valid;
          if (storage < value) {
            return is_valid = false;
          }
        });
      }
      return file[name] = value;
    });
    form.on('part', function(part) {
      var out;
      if (part.filename) {
        out = fs.createWriteStream("storage/" + request.session.login + file.path + "/" + file.hash);
        return part.pipe(out);
      }
    });
    form.on('error', function(error) {
      return response.status(403).send(error);
    });
    form.on('aborted', function() {
      fs.unlink("storage/" + request.session.login + file.path + "/" + file.hash);
      return response.end();
    });
    return form.one('close', function() {
      return fileExsists(file.filename, request.session.login, file.path, 'file', function(result) {
        if (result) {
          fs.unlink("storage/" + request.session.login + "/" + file.hash);
          return response.status(403).send("Ooops! " + file.filename + " file currently exsists!");
        } else {
          return getFreeStorage(request.session.login, function(storage) {
            if (storage < (file.size / 1024 / 1024)) {
              fs.unlink("storage/" + request.session.login + "/" + file.hash);
              return response.status(403).send('Ooops! There are no a lot of free storage on your cloud');
            } else {
              return setRightExtension(file, function(file) {
                var File;
                file.general = false;
                File = new fileModel(file);
                return File.save(function(error) {
                  if (error) {
                    return response.status(403).send('Ooops! Error to database connection. Please check your internet connection!');
                  }
                  User.find({
                    login: request.session.login
                  }, function(error, users) {
                    users[0].storage -= file.size / 1024 / 1024;
                    return users[0].save(function(error) {
                      if (error) {
                        return response.status(403).send('Ooops! Error to database connection. Please check your internet connection!');
                      }
                    });
                  });
                  Stat.find({
                    owner: request.session.login,
                    month: new Date().getMonth().toLocaleString()
                  }, function(error, stats) {
                    var stat;
                    if (stats.length) {
                      stats[0].uploaded++;
                      return stats[0].save(function(error) {
                        if (error) {
                          return response.status(403).send('Ooops! Error to database connection. Please check your internet connection!');
                        }
                      });
                    } else {
                      stat = new Stat({
                        owner: request.session.login,
                        month: new Date().getMonth().toLocaleString(),
                        uploaded: 1,
                        deleted: 0,
                        downloaded: 0
                      });
                      return stat.save(function(error) {
                        if (error) {
                          return response.status(403).send('Ooops! Error to database connection. Please check your internet connection!');
                        }
                      });
                    }
                  });
                  return response.send({
                    status: 'ok',
                    text: 'Uploading complete!'
                  });
                });
              });
            }
          });
        }
      });
    });
  };

}).call(this);
